package Stack_Queue.correctParenthesis;

public class Solution {
	public static void main(String[] args) {

		Solution test = new Solution();
		boolean result;
		String inputStr = "";

		// 테스트 1
		inputStr = "()()";
		result = test.solution(inputStr);
		System.out.println("test1 : " + result);

		// 테스트 2
		inputStr = "(())()";
		result = test.solution(inputStr);
		System.out.println("test2 : " + result);

		// 테스트 3
		inputStr = ")()(";
		result = test.solution(inputStr);
		System.out.println("test3 : " + result);

		// 테스트 4
		inputStr = "(()(";
		result = test.solution(inputStr);
		System.out.println("test4 : " + result);
	}

	boolean solution(String s) {

		boolean answer = true;
		int left = 0, right = 0;

		String[] strArray = s.split("");

		char first = s.charAt(0);
		char last = s.charAt(s.length() - 1);

		// 시작이 ) 경우, 마지막이 ( 경우 제외
		if (first == ')' || last == '(') {
			return false;
		}

		for (String str : strArray) {
			if (str.equals("(")) {
				left++;
			} else {
				right++;
			}
		}

		// 괄호갯수가 다를 경우 제외
		if (left != right) {
			return false;
		}

		return answer;
	}
}
